module esmFldsExchange_mod

  !---------------------------------------------------------------------
  ! This is a mediator specific routine that determines ALL possible
  ! fields exchanged between components and their associated routing,
  ! mapping and merging
  !---------------------------------------------------------------------

  implicit none
  public

  public :: esmFldsExchange_{{name}}

  character(*), parameter :: u_FILE_u = &
       __FILE__

!================================================================================
contains
!================================================================================

  subroutine esmFldsExchange_{{name}}(gcomp, phase, rc)

    use ESMF     
    use NUOPC
    use med_kind_mod          , only : CX=>SHR_KIND_CX, CS=>SHR_KIND_CS, CL=>SHR_KIND_CL, R8=>SHR_KIND_R8
    use med_utils_mod         , only : chkerr => med_utils_chkerr
    use esmFlds               , only : addfld => med_fldList_AddFld

    ! input/output parameters:
    type(ESMF_GridComp)              :: gcomp
    character(len=*) , intent(in)    :: phase
    integer          , intent(inout) :: rc

    ! local variables:
    character(len=CL)   :: cvalue

    !=====================================================================
    ! scalar information
    !=====================================================================

    call NUOPC_CompAttributeGet(gcomp, name="ScalarFieldName", value=cvalue, rc=rc)
    if (ChkErr(rc,__LINE__,u_FILE_u)) return
    do n = 1,ncomps
       call addfld(fldListFr(n)%flds, trim(cvalue))
       call addfld(fldListTo(n)%flds, trim(cvalue))
    end do

    {% for comp, fldspec in yaml["import"].items() %}

    !=====================================================================
    ! FIELDS FROM {{ comp|upper }}
    !=====================================================================

    {% for fld in fldspec %}
    {% if fld is string %}
    call addfld(fldListFr(comp{{comp}})%flds, '{{fld}}')		
    {% else %}
    {# TODO: check if field starts with '_' to indicate field group #}
    {% for f in fld.values()|first %}
    call addfld(fldListFr(comp{{comp}})%flds, '{{f}}')	! Field Group: {{fld|first}}
    {% endfor %}
    
    {% endif %}
    {% endfor %}
  
   
    {% endfor %}


  end subroutine esmFldsExchange_{{name}}


end module esmFldsExchange_mod
